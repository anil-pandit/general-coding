package sliding_window_questions.longest_substring_with_k_unique_char;import java.util.HashMap;import java.util.Map;import static java.lang.Math.max;public class Main {    private static int longestSubstring(String str, int k) {        int i = 0, j = 0;        Map<Character, Integer> map = new HashMap<>();        int max_window = 0;        int count = 1;        while(j < str.length()){            map.put(str.charAt(j), map.getOrDefault(str.charAt(j), 0)+1);            if(map.size() < k)                j++;            else if (map.size() == k){                max_window = max(max_window, j-i+1);                j++;            }            else if (map.size() > k){                while (map.size() > k){                    map.put(str.charAt(i), map.get(str.charAt(i))-1);                    if(map.get(str.charAt(i)) == 0){                        map.remove(str.charAt(i));                    }                    i++;                }                j++;            }        }        return max_window;    }    public static void main(String[] args) {        String str = "aabacbebebe";        int k = 3;        System.out.println(longestSubstring(str, k));    }}