package sliding_window_questions.longest_substring_without_repeating_char;import java.util.HashMap;import java.util.Map;import static java.lang.Math.max;public class Main {    //in this question the trick is if the condition is not given then window size is the maximum non-repeating    //character    private static int longestSubstringChar(String str) {        int i = 0, j = 0;        Map<Character, Integer> map = new HashMap<>();        int max_window = 0;        while(j < str.length()){            map.put(str.charAt(j), map.getOrDefault(str.charAt(j), 0)+1);//            if(map.size() > j-i+1)//                j++;            if (map.size() == j-i+1){                max_window = max(max_window, j-i+1);                j++;            }            else if (map.size() < j-i+1){                while (map.size() < j-i+1){                    map.put(str.charAt(i), map.get(str.charAt(i))-1);                    if(map.get(str.charAt(i)) == 0){                        map.remove(str.charAt(i));                    }                    i++;                }                j++;            }        }        return max_window;    }    public static void main(String[] args) {        String str = "pwwkeaww";        System.out.println(longestSubstringChar(str));    }}